/*
Handles the back, forward, and home navigation buttons:
- Updates the navigation history and highlights the last selected item when navigating backward.
- Prevents the forward button from being used unless the user has moved back first.
- Controls the visibility of content sections based on history.
*/

/*
navigation.js – Handles the hierarchical menu of topics and subtopics, and content view toggling. This script manages all interactions with the main content list and detail display. Key functions and behaviors include:
Menu expansion/collapse: It attaches click event handlers to each topic that has subtopics. When a user clicks on a topic title or its adjacent arrow, navigation.js toggles that section. This involves rotating the arrow icon (e.g., adding or removing an .expanded class on the arrow or parent element) and showing or hiding the nested list of subtopics (adding/removing the .hidden or .expanded class on the subtopics container). Only the clicked section is expanded, but previously expanded sections might remain open unless you choose to collapse them (depending on desired UX – likely multiple categories can be expanded simultaneously).
Nested subtopics: For subtopics that further contain their own subtopics, the same toggle mechanism is applied recursively. The script ensures that clicking a parent item reveals or hides its children list. It may also scroll the content area if needed to bring the expanded section into view.
Detail section display: When a user clicks a final subtopic (one with no further children, typically indicated by the absence of an arrow icon), this script handles the transition to the detailed view. For example, navigation.js might hide the main topics list panel (by adding a class like .hidden to that container or switching a view state) and unhide the corresponding detail content section for that subtopic. It could also update the page heading or breadcrumb to reflect the currently viewed topic. If the detail content is sizable, the script might ensure it’s scrollable and styled properly. The content can be pre-written in the HTML or generated, but the script is responsible for making it visible and populating any dynamic values (especially those influenced by patient data).
Highlighting and context: navigation.js is also in charge of highlighting the active item in the menu. For instance, when a detail view is opened, the script can add a CSS class (e.g., .active or .selected) to the corresponding entry in the topics list (and perhaps ensure its parent categories are expanded) so that if the user navigates back, they can see where they were. Conversely, when the user goes back to the main list from a detail, this script highlights the last-viewed subtopic and maybe focuses it in view.
Back/Home navigation support: If the user clicks the Home button, navigation.js will receive that event (or be called by main.js/history.js) to return the interface to the main contents page. That means collapsing all expanded subtopics and showing the top-level list (essentially a reset to the start view). For Back and Forward, navigation.js works in conjunction with history.js – it provides functions like showDetail(topicId) or showListState(state) that history.js can call to restore a previous view. For example, navigation.js knows how to expand the correct categories and highlight the correct item when given some identifier or state object.
This script may also define a data structure mapping topic identifiers to their detail content elements or parent/child relationships (if not easily derived from the DOM) so that it can programmatically open or highlight topics (especially useful for search results and history navigation).
*/