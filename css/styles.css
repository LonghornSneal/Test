/*
Defines all visual styling for the application:
- Layout of the main content page, sidebar, and navigation controls.
- Styles for the blue arrows, expandable lists, hidden text sections, and warning messages.
- Font declarations and responsive design rules.
*/

/*
style.css – Main stylesheet defining the UI’s look and feel. It covers layout, colors, typography, and responsive behavior of the app. Key styling includes:
Layout styles: CSS rules to position the header, sidebar, content list, and detail view. For example, the patient info sidebar might be positioned off-canvas or as an overlay that slides out from the left; the content list might scroll independently if tall, and detail sections might either overlay the list or replace it.
Typography and color: Defines font families, sizes, and weights for titles, content text, and highlights. Ensures the “various style options” for text (bold, italic, underlined, etc.) are available. Also sets colors for headings, normal text, links, and warning messages (e.g., using red or bold for warnings).
Menu and button styles: Styles for the topic list and arrows. For example, arrows might be implemented using an inline image or CSS content; .collapsed vs .expanded classes could rotate an arrow icon (pointing right vs down) using a CSS transform. List items are indented to show hierarchy. Buttons (like Home, Back, Forward, History, and leaf topic buttons) have distinct styling (color, hover effects) to appear clickable. The currently selected or highlighted item (e.g., the last clicked topic when returning to the list) has a special highlight style.
Hidden and visible states: CSS classes to show/hide elements. For instance, .hidden class to conceal subtopic lists or detail sections when not active, and .visible or .expanded to display them. Also, a class for the hidden patient info panel (e.g., .sidebar-collapsed vs .sidebar-expanded) to animate or toggle its visibility. The collapsible text sections inside detail views might use a class like .collapsed-text (initially only a title is shown) and .expanded-text to show the full content when toggled.
Conditional formatting: Predefined styles for dynamic changes driven by user input. For example, a CSS class like .not-applicable could apply a strikethrough (via text-decoration) or a faded appearance (via opacity or grayscale filter) to indicate a protocol/medication that isn’t appropriate given the patient’s data. A .warning class might highlight text or sections in a noticeable way (yellow background or red text) when a dangerous combination or condition is detected. These classes will be added or removed by the JavaScript logic in response to patient data inputs.
Responsive design: (If needed) Media queries to ensure the app works on different devices (e.g., tablet or phone that a paramedic might use in the field). This might adjust font sizes or layout (perhaps making the sidebar full-screen on mobile, etc.) so content remains accessible.
*/